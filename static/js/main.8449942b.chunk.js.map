{"version":3,"sources":["components/Square.tsx","components/Board.tsx","squares.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","Square","text","finished","toggleFinished","className","onClick","style","backgroundColor","GREEN","WHITE","flex","textAlign","color","range","max","Array","keys","Board","shuffledSquares","seed","squares","seedArray","Int8Array","s","bytes","i","length","push","parseInt","substr","hexToBytes","mt","MersenneTwister19937","seedWithArray","Int32Array","buffer","shuffle","slice","useState","Set","setFinished","toggleFinishedMaker","id","newFinished","values","has","delete","add","map","row","col","key","raids","Leviathan","App","setSeed","raid","setRaid","boardSeed","from","c","charCodeAt","toString","toUpperCase","join","repeat","boardProps","setBoardProps","onChange","e","target","value","placeholder","Object","filter","name","newSeed","autoSeed","string","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yKAQKA,E,2EAAAA,K,cAAAA,E,eAAAA,M,KAKL,IAsBeC,EAtBA,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,eAChC,OACE,wBACEC,UAAU,aACVC,QAAS,kBAAMF,KACfG,MAAO,CACLC,gBAAiBL,EAAWH,EAAOS,MAAQT,EAAOU,QAGpD,0BACEH,MAAO,CACLI,KAAM,EACNC,UAAW,SACXC,MAAOV,EAAW,QAAU,UAG7BD,KCjBHY,EAAQ,SAACC,GAAD,mBAAqB,IAAIC,MAAMD,GAAKE,SA0DnCC,EAnDD,SAAC,GAA8B,IACvCC,EADWC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAGrB,GAAID,EAAM,CACR,IAAME,EAAY,IAAIC,UAnBP,SAACC,GAElB,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAIF,EAAEG,OAAQD,GAAK,EACjCD,EAAMG,KAAKC,SAASL,EAAEM,OAAOJ,EAAG,GAAI,KAEtC,OAAOD,EAc2BM,CAAWX,IACrCY,EAAKC,IAAqBC,cAC9B,IAAIC,WAAWb,EAAUc,SAE3BjB,EAAkBkB,YAAQL,EAAIX,EAAQiB,MAAM,IAC5CnB,EAAe,sBACVA,EAAgBmB,MAAM,EAAG,KADf,CAEbjB,EAAQ,IAFK,YAGVF,EAAgBmB,MAAM,WAG3BnB,EAAkBE,EAfsB,MAkBVkB,mBAAsB,IAAIC,KAlBhB,mBAkBnCrC,EAlBmC,KAkBzBsC,EAlByB,KAoBpCC,EAAsB,SAACC,GAAD,OAAgB,WAC1C,IAAMC,EAAc,IAAIJ,IAAYrC,EAAS0C,UACzCD,EAAYE,IAAIH,GAClBC,EAAYG,OAAOJ,GAEnBC,EAAYI,IAAIL,GAElBF,EAAYG,KAGd,OACE,2BAAOvC,UAAU,SACdS,EAAM,GAAGmC,KAAI,SAACC,GAAD,OACZ,4BACGpC,EAAM,GAAGmC,KAAI,SAACE,GACb,IAAMR,EAAW,EAANO,EAAUC,EACrB,OACE,kBAAC,EAAD,CACEjD,KAAMiB,EAAgBwB,GACtBxC,SAAUA,EAAS2C,IAAIH,GACvBvC,eAAgBsC,EAAoBC,GACpCS,IAAKT,aC8GNU,EA1K4B,CACzC,YAAa,CACX,yBACA,uBACA,qBACA,8BACA,uCACA,4CACA,0CACA,4CACA,uCACA,mDACA,4EACA,wCACA,uCACA,sDACA,uCACA,8BACA,sCACA,wBACA,qDACA,qBACA,+CACA,wBACA,0DACA,6DACA,mEAEFC,UAAW,CACT,mCACA,6BACA,6CACA,4BACA,2DACA,oCACA,qCACA,gBACA,sCACA,kCACA,mCACA,iBACA,uCACA,6CACA,iCACA,kCACA,uDACA,2DACA,6BACA,sCACA,+BACA,yCACA,yCACA,oEACA,4BAEF,sBAAuB,CACrB,uBACA,wBACA,mBACA,gBACA,gCACA,cACA,2BACA,+BACA,+BACA,sBACA,gBACA,iCACA,6BACA,2CACA,4BACA,4BACA,4DACA,6BACA,4BACA,+BACA,8CACA,wCACA,oCACA,sCACA,mCAEF,sBAAuB,CACxB,0BACA,yBACA,wBACA,uBACA,gCACA,2BACA,2BACA,wBACA,qDACA,4CACA,oCACA,qBACA,kBACA,oCACA,qBACA,kBACA,oFACA,uCACA,8BACA,qBACA,uBACA,8CACA,qBACA,WACM,qBAEL,iBAAkB,CACnB,sBACA,2CACA,gCACA,oDACA,kDACA,yBACA,sBACA,wDACA,sCACA,8BACA,qBACA,UACA,8BACA,gDACA,4CACA,iCACA,iCACA,iCACA,iCACA,2BACA,gDACA,qBACA,qCACA,mCACA,yCAEC,mBAAoB,CACrB,0CACA,wBACA,uBACA,8BACA,qCACA,qCACA,kCACA,gCACA,2BACA,oCACA,yBACA,wCACA,8CACA,sCACA,kCACA,6BACA,+BACA,+BACA,gBACA,eACA,4BACA,sCACA,+BACA,8BACA,wBACA,uDACA,2BACA,oBACA,sCACA,wC,OChKDD,EAAK,KAAW,YAAIrC,MAAM,IAAIC,QAAQgC,KAAI,iBAAM,MAEhD,IAkEeM,EAlEH,WAAO,IAAD,EACQhB,mBAAiB,IADzB,mBACTnB,EADS,KACHoC,EADG,OAEQjB,mBAAsC,QAF9C,mBAETkB,EAFS,KAEHC,EAFG,KAGZC,EAAY,GACZvC,IACFuC,EAAY3C,MAAM4C,KAAKxC,GACpB6B,KAAI,SAACY,GAAD,OAAOA,EAAEC,WAAW,GAAGC,SAAS,IAAIC,iBACxCC,KAAK,IACRN,EAAS,UAAMA,GAAN,OACPA,EAAUhC,OAAS,IAAM,EAAI,IAAIuC,OAAO,EAAKP,EAAUhC,OAAS,GAAM,KAT1D,MAaoBY,mBAElC,CACAlB,QAASgC,EAAMI,GACfrC,KAAMuC,IAjBQ,mBAaTQ,EAbS,KAaGC,EAbH,KAoBhB,OACE,yBAAK/D,UAAU,OACb,yBAAKsC,GAAG,SACN,2BACE0B,SAAU,SAACC,GAAD,OAAOd,EAAQc,EAAEC,OAAOC,QAClCC,YAAY,yCACZD,MAAOpD,EACPuB,GAAG,SAEL,4BACEA,GAAG,cACH6B,MAAOf,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOC,SAElC,4BAAQA,MAAM,QAAd,eACCE,OAAOzD,KAAKoC,GACVsB,QAAO,SAACC,GAAD,MAAmB,SAATA,KACjB3B,KAAI,SAAC2B,GAAD,OACH,4BAAQJ,MAAOI,EAAMxB,IAAKwB,GACvBA,OAIT,4BACEtE,QAAS,WACP,GAAa,SAATmD,EAAiB,CACnB,IAAIoB,EAAUzD,EACd,IAAKA,EAAM,CACT,IAAMY,EAAKC,IAAqB6C,WAChCD,EAAUE,YAAO,mBAAPA,CAA2B/C,EAAI,IACzCwB,EAAQqB,GAEVT,EAAc,CAAE/C,QAASgC,EAAMI,GAAOrC,KAAMyD,OATlD,aAgBF,6BACE,kBAAC,EAAUV,MCxDba,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsB,IACpBC,sBACA9B,OAAOC,SAAS8B,MAEJC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,sBAAN,sBAEPhC,IAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC1C/BE,I","file":"static/js/main.8449942b.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n  text: string;\n  finished: boolean;\n  toggleFinished: () => void;\n};\n\nenum Colors {\n  WHITE = \"white\",\n  GREEN = \"green\",\n}\n\nconst Square = ({ text, finished, toggleFinished }: Props) => {\n  return (\n    <td\n      className=\"bingo-cell\"\n      onClick={() => toggleFinished()}\n      style={{\n        backgroundColor: finished ? Colors.GREEN : Colors.WHITE,\n      }}\n    >\n      <span\n        style={{\n          flex: 1,\n          textAlign: \"center\",\n          color: finished ? \"white\" : \"black\",\n        }}\n      >\n        {text}\n      </span>\n    </td>\n  );\n};\n\nexport default Square;\n","import React, { useState } from \"react\";\nimport { MersenneTwister19937, shuffle } from \"random-js\";\nimport Square from \"./Square\";\n\nconst hexToBytes = (s: string) => {\n  const bytes = [];\n  for (let i = 0; i < s.length; i += 2) {\n    bytes.push(parseInt(s.substr(i, 2), 16));\n  }\n  return bytes;\n};\n\nconst range = (max: number) => [...new Array(max).keys()];\n\ntype Props = {\n  seed: string;\n  squares: string[];\n};\n\nconst Board = ({ seed, squares }: Props) => {\n  let shuffledSquares: string[];\n\n  if (seed) {\n    const seedArray = new Int8Array(hexToBytes(seed));\n    const mt = MersenneTwister19937.seedWithArray(\n      new Int32Array(seedArray.buffer)\n    );\n    shuffledSquares = shuffle(mt, squares.slice(1)); // first element is free space and should always be in the middle\n    shuffledSquares = [\n      ...shuffledSquares.slice(0, 12),\n      squares[0],\n      ...shuffledSquares.slice(12),\n    ];\n  } else {\n    shuffledSquares = squares;\n  }\n\n  const [finished, setFinished] = useState<Set<number>>(new Set<number>());\n\n  const toggleFinishedMaker = (id: number) => () => {\n    const newFinished = new Set<number>(finished.values());\n    if (newFinished.has(id)) {\n      newFinished.delete(id);\n    } else {\n      newFinished.add(id);\n    }\n    setFinished(newFinished);\n  };\n\n  return (\n    <table className=\"bingo\">\n      {range(5).map((row) => (\n        <tr>\n          {range(5).map((col) => {\n            const id = row * 5 + col;\n            return (\n              <Square\n                text={shuffledSquares[id]}\n                finished={finished.has(id)}\n                toggleFinished={toggleFinishedMaker(id)}\n                key={id}\n              />\n            );\n          })}\n        </tr>\n      ))}\n    </table>\n  );\n};\n\nexport default Board;\n","const raids: { [key: string]: string[] } = {\n  \"Last Wish\": [\n    \"Free: foww genewations\",\n    \"Kalli: failsafe wish\",\n    \"Kalli: chaos doors\",\n    \"Kalli: wrong plate cleansed\",\n    \"Kalli: someone dies to orb explosion\",\n    \"Shuro Chi: someone dies to bridge jumping\",\n    \"Shuro Chi: someone dies to plate damage\",\n    \"Shuro Chi: teacup spins and drops someone\",\n    \"Shuro Chi: eye of riven is picked up\",\n    \"Morgeth: someone dies to ascendant plane jumping\",\n    \"Morgeth: platforms in ascendant plane despawn before everyone gets across\",\n    \"Morgeth: fail to cleanse stuck person\",\n    \"Morgeth: someone dies to axion darts\",\n    \"Vault: captain successfully booped into center room\",\n    \"Vault: non-standard symbol name used\",\n    \"Vault: wrong plate cleansed\",\n    \"Vault: knight sticks sword in plate\",\n    \"Riven: cheese is done\",\n    \"Riven: directions for cleanse without number chart\",\n    \"Riven: missed stun\",\n    \"Riven: wrong eye is shot when eyes are known\",\n    \"QW: someone gets lost\",\n    \"QW: multiple people get pulled inside the heart at once\",\n    \"QW: heart timer extended too early (> 10 seconds on timer)\",\n    \"QW: someone dies to creeping darkness while going down elevator\",\n  ],\n  Leviathan: [\n    \"Free: getting lost in underbelly\",\n    \"Castellum: colossi aggro'd\",\n    \"Castellum: flag order is guessed correctly\",\n    \"Castellum: flag reclaimed\",\n    \"Castellum: group does castellum 4x instead of underbelly\",\n    \"Dogs: alerting dogs with 0 stacks\",\n    \"Dogs: crystal holder alerting dogs\",\n    \"Dogs: 2-phase\",\n    \"Dogs: someone dies to beast handler\",\n    \"Baths: someone runs out of buff\",\n    \"Baths: a chain completely resets\",\n    \"Baths: 2-phase\",\n    \"Baths: accidental suicide during dps\",\n    \"Gauntlet: runner dies due to missed arrows\",\n    \"Gauntlet: someone dies to adds\",\n    \"Gauntlet: a psion is left alive\",\n    \"Gauntlet: wipe due to too few orbs after final round\",\n    \"Calus: someone dies by falling in a hole in shadow realm\",\n    \"Calus: wrong psion punched\",\n    \"Calus: fail to break shield in time\",\n    \"Calus: less than x50 for dps\",\n    \"Underbelly: death by watcher explosion\",\n    \"Underbelly: death by falling off pipes\",\n    \"Underbelly: fail to kill all watchers when trying to open a chest\",\n    \"Underbelly: death by fan\",\n  ],\n  \"Garden of Salvation\": [\n    \"Big portal bamboozle\",\n    \"Too loud eye callouts\",\n    \"Dying with motes\",\n    \"No champ mods\",\n    \"Wrong person picking up motes\",\n    \"Tether orgy\",\n    \"Cyclops in the DPS phase\",\n    \"Forgot to go into the portal\",\n    \"Wrong person or wrong portal\",\n    \"Can't kill angelics\",\n    \"Motes run out\",\n    \"Troubles with jumping sections\",\n    \"Death to Vex Instantiation\",\n    \"Someone dies because of Voltaic Overflow\",\n    \"Consecrated Mind Telefrag\",\n    '\"Pulling\" to an encounter',\n    \"Someone left out of the final tethers at second encounter\",\n    '\"Pushing\" shielded enemies',\n    \"Both portals open at once\",\n    \"Someone dying to the pyramid\",\n    \"Attempting a tether with a non-locked relay\",\n    \"Dealing with the eyes from the middle\",\n    \"Locked out during Consecrated DPS\",\n    \"Depositing motes at the wrong relay\",\n    \"Gambit team has no void weapons\",\n  ],\n  \"Scourge of the Past\": [\n\t\"Anything other than CAP\",\n\t\"Comparison to a strike\",\n\t\"Dying in sparrow race\",\n\t\"No light in the maze\",\n\t\"Punching the corrupted symbol\",\n\t\"Getting lost in the maze\",\n\t\"Getting lost in the city\",\n\t\"Wrong beserker killed\",\n\t\"Beserker Shield isn't destroyed on the first pulse\",\n\t\"Shields are still up when the tank spawns\",\n\t\"Death due to tethering during DPS\",\n\t\"Vague map callouts\",\n\t\"Miscounted dots\",\n\t\"Tank spawn in the first encounter\",\n\t\"Failed ball duping\",\n\t\"Missed a button\",\n\t\"One person already at the Boss Phase I while someone is still at the jumping part\",\n\t\"Confusion regarding where to deposit\",\n\t\"Snipers still up during DPS\",\n\t\"Boss not staggered\",\n\t\"Death to electricity\",\n\t\"Not using sparrows where they could be used\",\n\t\"Shanks underground\",\n\t\"Xeno DPS\",\n      \t\"Radiance tethered\",\n  ],\n  \"Vault of Glass\": [\n\t\"Vex capture a plate\",\n\t\"One team doesn't capture a plate forever\",\n\t\"Very hidden chest pointed out\",\n\t\"Someone takes the route not past the second chest\",\n\t\"Overload wanders onto the other side of the map\",\n\t\"Someone soloes oracles\",\n\t\"Death due to detain\",\n\t\"Relic is dropped accidentally before shield is broken\",\n\t\"Noone deals with oracles at Templar\",\n\t\"Alternate route to the maze\",\n\t\"Omniscient gorgons\",\n\t\"Wallrun\",\n\t\"Icarus dash acros the chasm\",\n\t\"Gorgon wipes when everyone is through already\",\n\t\"Relic enters the portal it just came from\",\n\t\"Noone is standing on the plate\",\n\t\"Relic starts in the wrong room\",\n\t\"Noone grabs the relic after TP\",\n\t\"Alternate callouts for oracles\",\n\t\"Whole team gets detained\",\n\t\"Encounter started before rally flag is placed\",\n\t\"0 mythoclast drops\",\n\t\"A titan pulls off 2 thundercrashes\",\n\t\"Someone is still blind after DPS\",\n\t\"Death due to relic blocking the shots\",\n  ],\n  \"Deep Stone Crypt\": [\n\t\"Death by falling off the spawn platform\",\n\t\"Locked out by Airlock\",\n\t\"Lost in the blizzard\",\n\t\"One person soloed the brigs\",\n\t\"Encounter started before the rally\",\n\t\"One side stays without any players\",\n\t\"Servitors delaying damage phase\",\n\t\"Three phases needed for fuses\",\n\t\"Last fuse shot too early\",\n\t\"Someone sucked out of the airlock\",\n\t\"No elevators available\",\n\t\"A replication not picked up after DPS\",\n\t\"More than one atraks needed for final phase\",\n\t\"Someone skipping the jumping puzzle\",\n\t\"FREE: Guardian Down! during DSL\",\n\t\"An augment left to despawn\",\n\t\"Triple nuke: Descent edition\",\n\t\"Locked augment not deposited\",\n\t\"Meme callouts\",\n\t\"Nukes stolen\",\n\t\"Noone dealing with champs\",\n\t\"Two nukes deposited in the same bin\",\n\t\"Suppressor at the wrong side\",\n\t\"Triple nuke: Taniks edition\",\n\t\"Killed by electricity\",\n\t\"Less than 3 players left standing during Final Stand\",\n\t\"Two Guardians one Bubble\",\n\t\"DrOnE dIdN't WoRk\",\n\t\"Scanner picked up during boss fight\",\n\t\"People blocked out of the safe room\",\n  ],\n};\n\nexport default raids;\n","import { MersenneTwister19937, string } from \"random-js\";\nimport React, { useState } from \"react\";\nimport { Board } from \"./components\";\nimport raids from \"./squares\";\nimport \"./App.css\";\n\nraids[\"null\"] = [...Array(25).keys()].map(() => \"\");\n\nconst App = () => {\n  const [seed, setSeed] = useState<string>(\"\");\n  const [raid, setRaid] = useState<keyof typeof raids | \"null\">(\"null\");\n  let boardSeed = \"\";\n  if (seed) {\n    boardSeed = Array.from(seed)\n      .map((c) => c.charCodeAt(0).toString(16).toUpperCase())\n      .join(\"\");\n    boardSeed = `${boardSeed}${\n      boardSeed.length % 8 !== 0 ? \"0\".repeat(8 - (boardSeed.length % 8)) : \"\"\n    }`;\n  }\n\n  const [boardProps, setBoardProps] = useState<\n    React.ComponentProps<typeof Board>\n  >({\n    squares: raids[raid],\n    seed: boardSeed,\n  });\n\n  return (\n    <div className=\"app\">\n      <div id=\"setup\">\n        <input\n          onChange={(e) => setSeed(e.target.value)}\n          placeholder=\"Enter seed (or leave blank for random)\"\n          value={seed}\n          id=\"seed\"\n        />\n        <select\n          id=\"raid-select\"\n          value={raid}\n          onChange={(e) => setRaid(e.target.value as keyof typeof raids)}\n        >\n          <option value=\"null\">Select Raid</option>\n          {Object.keys(raids)\n            .filter((name) => name !== \"null\")\n            .map((name) => (\n              <option value={name} key={name}>\n                {name}\n              </option>\n            ))}\n        </select>\n        <button\n          onClick={() => {\n            if (raid !== \"null\") {\n              let newSeed = seed;\n              if (!seed) {\n                const mt = MersenneTwister19937.autoSeed();\n                newSeed = string(\"1234567890ABCDEF\")(mt, 32);\n                setSeed(newSeed);\n              }\n              setBoardProps({ squares: raids[raid], seed: newSeed });\n            }\n          }}\n        >\n          Generate\n        </button>\n      </div>\n      <div>\n        <Board {...boardProps} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}